---------------------------------------
-----Indexing Project for Archives-----
---------------------------------------

+---Notes from Trello--------------------------------------------------------------------------
|
| From Nat, Initial Descriptions:
| We will start with this collection as a pilot
| https://archivedb.carleton.edu/?p=collections/controlcard&id=2809
| All fields to be indexed will be stored in tblCollections_Collections.RevisionHistory and listed using the MySQL
| table.fieldname format. In the case of User Defined Fields, there needs to be a definition of the Title value to
| distinguish between all the User Defined fields.
|
| See attached sheet as a template of the output
|
| Using MySQL, create a user defined field containing text from all fields that we want searchable across fields.
| Examples include title, creator, date and subjects. Concatenate all their values together into one user defined 
| field that is searchable and hidden. Then we would need to write in additional checks to see if there is already a 
| search term field and if so, overwrite its contents.
|  +-------------------------------------------+------------+------------+-------------------------+------------+
|  |ID                                         |ContentID   |Title       |Value                    |EADElementID|
|  +-------------------------------------------+------------+------------+-------------------------+------------+
|  | blank if no record, existing # if present | Content ID | IndexField | values separated by ";" | 15         |
|  +-------------------------------------------+------------+------------+-------------------------+------------+
|
| Notes from Caitlin as of March 3rd:
| Current progress: We have a full set of Mysql stored procedures that will do this for a collection but it is
| currently very inefficient/slow. The next step is to see if we can create a PHP version that could be accessed
| through the admin page. I believe running a php version would be much faster, as a lot of the parts that require 
| looping and temporary tables could be easily done in one step with PHP.
|
+---End notes from Trello---------------------------------------------------------------------------

------------------------------------
---Current Algorithm, using MySQL---
------------------------------------
There are currently 5 stored procedures and 1 stored function used to run the mysql program.

collection_start:
	takes a collection ID, and runs get_revision_history, then collection_update

get_revision_history:
	Selects tblcollections_collections_RevisionHistory into a variable. Uses substrings to grab all of the items in the field, and put them into a table with index numbers. (Using a while loop). This table is a temporary table, but can be accessed for the rest of the process.

collection_update:
	Cursor through the IDs for the collection from tblcollections_content. Call item_update for every item in the collection using this cursor. Drop the revision history table at the end of this procedure.

item_update:
	Create a variable to hold the content that will be added to the indexField (usr_fld_content). Create a temporary table  (UserFieldContent) then call rev_hist_cursor for the item. Then set usr_fld_content the the return value of field_val_cursor(). Then drop the temporary table. 
	If the indexField does not already exist for the item, create it, ising usr_fld_content as the value. If the field does exist, just set the value as usr_fld_content.

rev_hist_cursor:
	Cursor through the items in RevisionHistory. for each item do the following:
	if the item contains "tblcollections_UserFields" replace "tblcollections_userfields.title=" with an empty string. Next insert into UserFieldContent the value from the corresponding userfield for that item. If the item is not a UserField then replace "tblcollections_content." with an empty string. Next we need to prepare a MySQL statement, so that we can insert the modified value from RevisionHistory into the SELECT statement, and select that column from tblcollections_content. We select this into a temporary variable. Then we insert this into Userfieldcontent.

field_val_cursor:
	First, we create a variable that holds the return value, which is initially empty. Next we cursor through our temporary UserFieldContent table selecting the title and value from each row. For each row, we do the following:
	If the fetched value is empty, we do nothing. IF the return value is not empty, we concat the current return value with "; 'title' : 'value'". If the return value is empty, we only concat "'title' : 'value'". This presents formatting issues. Once we have done this for all of the rows, we return our return value.

-----------------------------------
---Analysis of Current Algorithm---
-----------------------------------

Currently this algorithm runs far too slowly. It takes a very long time for even one small collection to update, and is not reasonable to use on our entire collection. MySQL's limitations on storing variables creates too inefficient of a program due to how frequently we must loop through temporary tables. First, we have to loop through every item in the collection, then we have to loop through the revision history and userfield content for every item. For each of these loops we have several select statements. Overall this ends up slowing the problem down massively.

------------------------
---Next Approach: PHP---
------------------------

Next I will try and make a PHP tool in Archon that will do these steps. PHP should give us a little more flexibility and speed, as it will require less looping, and fewer queries. It should also give us a little more power over what work we want to do. 

---------------------------------------------------------------------------------------
-------PHP Approach--------------------------------------------------------------------
---------------------------------------------------------------------------------------

------------------------------------------------------------------------
---Exploring locations where previous student batch tool made changes---
------------------------------------------------------------------------

-There is a previous tool that has been made for archives that can be run from the admin page. We will look at this tool and see where changes were made, and if we can emulate this tool for purposes of this project.

Locations changes were made:
	-packages/digitallibrary/admin/convertblobs.php
	-packages/digitallibrary/admin/updatecontentfiles.php

	-packages/admin/digitallibrary.php
		-lines 403, 400, 420, 37, 
		-digitallibrary_ui_getfilelist() (49)
	-packages/digitallibrary/admin/filemanager.php
		-lines 99, 231-235, 54, 149
	-packages/digitallibrary/lib/core/archon.inc.php
		-getLinkedFileList() (321), getLinkedFiles() (340)
	-packages/digitallibrary/lib/creators/digitalcontent.inc.php
		-lines 576, 599, 248, 567
	-packages/digitallibrary/lib/creators/file.inc.php
		-lines 932, 83, 1170

----So what do each of these of these files/ locations do??----

-->packages/digitallibrary/admin/digitallibrary.php<--
CONTAINS FUNCTIONS: digitallibrary_ui_getfilelist()

-lines 35-38: call to digitallibrary_ui_getfilelist() based on user input
-lines 45-58: Function digitallibrary_ui_getfilelist(). This creates an array from getLinedFileList(), and sets up information based on this. 
-lines 400-404: add 'Update all' and 'Convert Blobs' buttons to the admin ui. Update all calls packages/digitallibrary/admin/updatecontentfiles.php, and 'Convert Blobs' calls .../convertblobs.php.
-line 420: adds the DirectLink field to the file section


-->packages/digitallibrary/admin/filemanager.php<--

-line 54+: call to getLinkedFiles(). 'Caching file', this takes place in the files_ui_cachefiles() method. Not sure what this is for.
-line 99: adds the DirectLink text field in the file manager ui for direct link
-line 149: more cache file stuff
-lines 231-235: populates the Filename field if direct link is provided


-->packages/digitallibrary/lib/core/archon.inc.php<â€”1
CONTAINS FUNCTIONS: getLinkedFileList() and getLinkedFiles()

-lines 321-338: Function getLinkedFileList(). Gets an array of file names for direct links
-lines 340-357: Function getLinkedFiles(). Similar to above


-->packages/digitallibrary/lib/creators/digitalcontent.inc.php<--
CONTAINS FUNCTION dbStorContentURLFiles()

-line 248: in dbLoadfiles(), adds DirectLink to query
-lines 561-599: function dbStoreContentURLFiles(). adds DirectLink, DigitalContentID, Title, and Filename to file, then calls dbStore.
-line 685: call to dbStoreContentURLFiles() at end of dbStore()


-->packages/digitallibrary/lib/creators/file.inc.php<--
	
-line 83: adds DirectLink to query in dbLoad
-lines 931-933: 'Easily get fileURL of a stored server file'
-line 1170: sets default DirectLink to empty string


--------------------------------------------------------------------------------
-----------Places to make changes/adds for indexing-----------------------------
--------------------------------------------------------------------------------

-make php page in admin (maybe in collections???) to run utility
-look for where to include button in collections section.
-possibly make tool for running on entire library, one collection, or one item?



Steps:
	*-Create Field on database management tab --> C:\xampp\htdocs\packages\core\admin\database.php
		-Dropdown menu to choose All, Collection, Content  -> text field to input id number (pops up?)

	-Create Page that it goes to (check if buttons work + exit button)
	-Write methods for single item update.
	-Write methods for collection update
	-Write methods for All update


	--> pull information from from Archon data array instead of queries
	--> Automatically run upon updating an item.

----------------------------------FINAL NOTES---------------------------------------------

	\packages\core\admin\database.php --> This is where the dialog setup is done
	places of interest:
	database_ui_dialog_index_search()
	lines 542-615

	for more understanding of how the dialog gets set up, take a look at 
	packages\core\js\admin.js
	--->admin_ui_opendialog

	what needs to be done from here:
	set up the dialog so that it asks the user for either a content id, or a collection id
	(or nothing) depending on what they chose when opening the dialog 


















